---- How to initialize a Go project Instruction Start ----

YOU MUST READ THE INSTRUCTION CAREFULLY AND FOLLOW EACH STEPS AND
EACH SENTENCES TO INITIALIZE A GO PROJECT.

---- Step 1 Start ----
Create a new file named `LICENSE` in the root directory of the project and add the following content:
```
All Rights Reserved

Copyright (c) 2023-2024 Metadiv Technology Limited

THE CONTENTS OF THIS PROJECT ARE PROPRIETARY AND CONFIDENTIAL.
UNAUTHORIZED COPYING, TRANSFERRING OR REPRODUCTION OF THE CONTENTS OF THIS PROJECT, VIA ANY MEDIUM IS STRICTLY PROHIBITED.

The receipt or possession of the source code and/or any parts thereof does not convey or imply any right to use them
for any purpose other than the purpose for which they were provided to you.

The software is provided "AS IS", without warranty of any kind, express or implied, including but not limited to
the warranties of merchantability, fitness for a particular purpose and non infringement.
In no event shall the authors or copyright holders be liable for any claim, damages or other liability,
whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software
or the use or other dealings in the software.

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
```
---- Step 1 End ----

---- Step 2 Start ----
Create a new file named `quick-setup.go` in the root directory of the project and add the following content and 
please replace the `mod_meta_accounting` with the name of your module:
(The SetupSwagger name is the name of the module excluding the `mod_meta` prefix)
```
package mod_meta_accounting

import (
    "github.com/metadiv-go-tech/metagin"

    _ "github.com/metadiv-go-tech/mod_meta_accounting/docs"
)

// @title mod_meta_accounting
// @version v1.0.0

// @license.name All rights reserved by Metadiv Technology Limited
// @license.url https://metadiv.io

func QuickSetup() {
    metagin.SetupSwagger("accounting")
    metagin.Migrate()
}
```
---- Step 2 End ----

---- Step 3 Start ----
Create a new file named `swag.sh` in the root directory of the project and add the following content:
(The instanceName is the name of the module excluding the `mod_meta` prefix)
```
#!/bin/bash
swag init -g quick-setup.go --instanceName accounting --pd --generatedTime
```
---- Step 3 End ----

---- Step 4 Start ----
Create a new file named `typescript.sh` in the root directory of the project and add the following content:
```
#!/bin/bash
go run cmd/typescript/main.go
```
---- Step 4 End ----

---- Step 5 Start ----
Create a new file named `main.go` in the path `cmd/typescript` of the project and add the following content:
```
package main

import (
    "github.com/metadiv-go-tech/metagin"
    "github.com/metadiv-go-tech/mod_meta_accounting"
)

func main() {
    mod_meta_accounting.QuickSetup()
    metagin.GenerateTypescript(".")
}
```
---- Step 5 End ----

---- Step 6 Start ----
Create a new file named `main.go` in the path `cmd/server` of the project and add the following content:
```
package main

import (
    "github.com/metadiv-go-tech/metagin"
    "github.com/metadiv-go-tech/mod_meta_dev_auth"
    "github.com/metadiv-go-tech/mod_meta_accounting"
)

func main() {
    mod_meta_dev_auth.QuickSetup()
    mod_meta_accounting.QuickSetup()
    metagin.Engine.Run()
}
```
---- Step 6 End ----

---- Step 7 Start ----
Create a new file named `.gitignore` in the root directory of the project and add the following content:
```
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool
*.out

# Dependency directories
# vendor/

# Go workspace file
go.work
go.work.sum

# MacOS
.DS_Store

# Vscode
.vscode/
__debug_bin*

# Metadiv
apis/
assets/
logs/
```
---- Step 7 End ----

---- How to initialize a Go project Instruction End ----

